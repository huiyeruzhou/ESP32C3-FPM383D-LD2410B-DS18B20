/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.4.8-dev */

#include "sensor.pb.hpp"
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

PB_BIND(sensor_Empty, sensor_Empty, AUTO)


PB_BIND(sensor_Status, sensor_Status, AUTO)


PB_BIND(sensor_Value, sensor_Value, AUTO)


PB_BIND(sensor_Configure, sensor_Configure, AUTO)



/* Name table */
static const char* sensor_SensorService_method_names[] = {
    "/sensor.SensorService/open",
    "/sensor.SensorService/close",
    "/sensor.SensorService/read",
    "/sensor.SensorService/configure",
};
/* Method Registration */
sensor_SensorService_Service::sensor_SensorService_Service() {
       addMethod(new erpc::Method<sensor_Empty, sensor_Status>(
               sensor_SensorService_method_names[0], sensor_Empty_fields, sensor_Status_fields,
               [](Service *s, sensor_Empty *i, sensor_Status *o)->rpc_status {return reinterpret_cast<sensor_SensorService_Service*>(s)->open(i, o);},
               this));
       addMethod(new erpc::Method<sensor_Empty, sensor_Status>(
               sensor_SensorService_method_names[1], sensor_Empty_fields, sensor_Status_fields,
               [](Service *s, sensor_Empty *i, sensor_Status *o)->rpc_status {return reinterpret_cast<sensor_SensorService_Service*>(s)->close(i, o);},
               this));
       addMethod(new erpc::Method<sensor_Empty, sensor_Value>(
               sensor_SensorService_method_names[2], sensor_Empty_fields, sensor_Value_fields,
               [](Service *s, sensor_Empty *i, sensor_Value *o)->rpc_status {return reinterpret_cast<sensor_SensorService_Service*>(s)->read(i, o);},
               this));
       addMethod(new erpc::Method<sensor_Value, sensor_Status>(
               sensor_SensorService_method_names[3], sensor_Value_fields, sensor_Status_fields,
               [](Service *s, sensor_Value *i, sensor_Status *o)->rpc_status {return reinterpret_cast<sensor_SensorService_Service*>(s)->configure(i, o);},
               this));
}
/* Server stub */
rpc_status sensor_SensorService_Service::open(sensor_Empty *req, sensor_Status *rsp) {
    LOGW(sensor_SensorService_method_names[0], "Service Unimplemented!");
    return rpc_status::UnimplmentedService;
}

rpc_status sensor_SensorService_Service::close(sensor_Empty *req, sensor_Status *rsp) {
    LOGW(sensor_SensorService_method_names[1], "Service Unimplemented!");
    return rpc_status::UnimplmentedService;
}

rpc_status sensor_SensorService_Service::read(sensor_Empty *req, sensor_Value *rsp) {
    LOGW(sensor_SensorService_method_names[2], "Service Unimplemented!");
    return rpc_status::UnimplmentedService;
}

rpc_status sensor_SensorService_Service::configure(sensor_Value *req, sensor_Status *rsp) {
    LOGW(sensor_SensorService_method_names[3], "Service Unimplemented!");
    return rpc_status::UnimplmentedService;
}


/* Client stub */
rpc_status sensor_SensorService_Client::open(sensor_Empty *req, sensor_Status *rsp) {
    return performRequest(const_cast<char *>(sensor_SensorService_method_names[0]), sensor_Empty_fields, (void *) req, sensor_Status_fields, (void *) rsp);
}

rpc_status sensor_SensorService_Client::close(sensor_Empty *req, sensor_Status *rsp) {
    return performRequest(const_cast<char *>(sensor_SensorService_method_names[1]), sensor_Empty_fields, (void *) req, sensor_Status_fields, (void *) rsp);
}

rpc_status sensor_SensorService_Client::read(sensor_Empty *req, sensor_Value *rsp) {
    return performRequest(const_cast<char *>(sensor_SensorService_method_names[2]), sensor_Empty_fields, (void *) req, sensor_Value_fields, (void *) rsp);
}

rpc_status sensor_SensorService_Client::configure(sensor_Value *req, sensor_Status *rsp) {
    return performRequest(const_cast<char *>(sensor_SensorService_method_names[3]), sensor_Value_fields, (void *) req, sensor_Status_fields, (void *) rsp);
}

